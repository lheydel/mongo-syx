#!/bin/bash

set -e           # exit on error
set -o pipefail  # trace ERR through pipes
set -o errtrace  # trace ERR through 'time command' and other functions
set -o errexit   # exit the script if any statement returns a non-true return value

function cleanup {
    echo "Cleaning up..."
    if [ -z ${DUMP_DIR+x} ] ; then
        echo -n
    else
        rm -rf $DUMP_DIR
        unset DUMP_DIR
    fi
    unset ORIGIN
    unset DESTINATION
    unset SKIP_CONFIRM
    unset TUNNEL_PORT
    unset TUNNEL_CREDENTIALS
    unset ORIGIN_CREDENTIALS
    unset DESTINATION_CREDENTIALS
}

function error {
    local parent_lineno="$1"
    local message="$2"
    local code="${3:-1}"
    if [[ -n "$message" ]] ; then
        echo "Error on or near line ${parent_lineno}: ${message}; exiting with status ${code}"
    else
        echo "Error on or near line ${parent_lineno}; exiting with status ${code}"
    fi
    cleanup
    exit "${code}"
}
trap 'error ${LINENO}' ERR

function usage_error {
    echo mongo-sync: "$1"
    echo "usage: mongo-sync push|pull"
    echo ""
    exit
}

function config_not_found {
    echo "failed: '$1' not found, it needs to be in the same dir"
    echo "aborting..."
    echo ""
    exit
}

function parse_yaml {
    s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
    sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  "$1" |
    awk -F$fs '{
        indent = length($1)/2;
        vname[indent] = $2;
        for (i in vname) {if (i > indent) {delete vname[i]}}
        if (length($3) > 0) {
            vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
            printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
        }
   }'
}

function get_script_dir {
    pushd . > /dev/null
    local SCRIPT_PATH="${BASH_SOURCE[0]}"

    if ([ -h "${SCRIPT_PATH}" ]) then
      while ([ -h "${SCRIPT_PATH}" ]) do cd `dirname "$SCRIPT_PATH"`; SCRIPT_PATH=`readlink "${SCRIPT_PATH}"`; done
    fi

    cd `dirname ${SCRIPT_PATH}` > /dev/null
    local SCRIPT_PATH=`pwd`;
    popd  > /dev/null

    echo $SCRIPT_PATH
}

function soft_confirmation {
    read -p "Are you sure you want to copy [$ORIGIN] into [$DESTINATION]? Enter 'yes': " response

    case $response in
        [yY][Ee][Ss] )  ;;
        *) echo "Incorrect input, aborting..."; exit;;
    esac
}

function strong_confirmation {
    local operation=$1
    local environment=$2

    read -p "Strong confirmation is enabled on '$environment' for operation '$operation'. Enter '$operation $environment' to continue... " response
 
    case $response in
        "$operation $environment") ;;
        *) echo "Incorrect input, aborting..."; exit;;
    esac
}

function load_config_file {
    local file=$1 
    local prefix=$2

    echo "Parsing '$file'..."

    if [ -f "$file" ]; then
       eval $(parse_yaml "$file" "$prefix")
       success_msg
    else
       config_not_found $file
    fi
}

function load_configs {
    echo "load_configs"
    
    DIR="$(get_script_dir)/config"

    local origin_config="$DIR/config-${ORIGIN}.yml"
    local dest_config="$DIR/config-${DESTINATION}.yml"

    load_config_file $origin_config "origin_"
    load_config_file $dest_config "destination_"

    # Loads: (* = 'origin' or 'destination')
    # - $*_db
    # - $*_host_url
    # - $*_host_port
    # - $*_access_username
    # - $*_access_password
    # - $*_tunnel_on
    # - $*_tunnel_access_username
    # - $*_tunnel_access_port
    # - $*_confirmation_write

    ORIGIN_CREDENTIALS=""
    if [[ ! -z $origin_access_username ]] ; then
        ORIGIN_CREDENTIALS="-u $origin_access_username -p $origin_access_password"
    fi

    DESTINATION_CREDENTIALS=""
    if [[ ! -z $destination_access_username ]] ; then
        DESTINATION_CREDENTIALS="-u $destination_access_username -p $destination_access_password"
    fi

    #TUNNEL_CREDENTIALS="$tunnel_access_username@$remote_host_url"
    #TUNNEL_PORT=27018

    DUMP_DIR=/tmp/"$origin_db"/dump
}

function banner {
    echo mongo-sync:
    echo -----------
}

function success_msg {
    echo "Success!"
    echo
}

function done_msg {
    echo "Done!"
    echo
}

function open_tunnel {
    echo "Connecting through SSH tunnel..."
    ssh -fqTNM -S db-sync-socket -L $TUNNEL_PORT:127.0.0.1:$remote_host_port $TUNNEL_CREDENTIALS -p $tunnel_access_port
}

function close_tunnel {
    echo "Disconnecting from SSH tunnel..."
    ssh -S db-sync-socket -O exit $TUNNEL_CREDENTIALS 2> /dev/null
}

function do_read {
    echo "Dumping '$ORIGIN' DB to $DUMP_DIR..."
    mongodump \
         -h "$origin_host_url":"$origin_host_port" \
         -d "$origin_db" \
         $ORIGIN_CREDENTIALS \
         -o "$DUMP_DIR"
    success_msg

}

function do_write {
    echo "Overwriting '$DESTINATION' DB with dump..."

    mongorestore \
         -h "$destination_host_url":"$destination_host_port" \
         -d "$destination_db" \
         $DESTINATION_CREDENTIALS \
         --nsExclude "*.system.*" \
         "$DUMP_DIR"/"$origin_db" --drop
    success_msg
}

function do_sync {
    banner
    if [ "$SKIP_CONFIRM" == false ] ; then
        soft_confirmation
    fi

    load_configs

    if [ "$destination_confirmation_write" == true ] ; then
         strong_confirmation "write" "$DESTINATION"
    fi

#    if [ "$tunnel_on" == true ] ; then
#        open_tunnel
#        remote_host_url="localhost"
#        remote_host_port=$TUNNEL_PORT
#    fi

     do_read
     do_write

#    if [ "$tunnel_on" == true ] ; then
#        close_tunnel
#    fi
}


## MAIN
## ====


if [[ $# -lt 2 ]] ; then
    usage_error "not enough arguments provided"
else
    ORIGIN="$1"
    DESTINATION="$2"
    SKIP_CONFIRM=false
    shift 2

    while [ "${1+defined}" ]; do
        if [ "$1" == '-y' ] ; then
            SKIP_CONFIRM=true
        else
            usage_error "unrecognized option \"$1\""
        fi
        shift
    done

    do_sync
    cleanup
    done_msg
fi
